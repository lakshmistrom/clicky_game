{"version":3,"sources":["components/Header.js","components/CharacterImage.js","utils/API.js","components/Characters.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","guessedStatus","score","topScore","CharacterImage","alt","name","src","image","onClick","onclick","API","search","axios","get","BASEURL","Characters","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchCharacters","then","res","setState","result","data","catch","err","console","log","clickedChars","state","_this2","characters","map","character","components_CharacterImage","key","id","handleClick","copy","slice","sort","b","Math","random","charId","clickedChar","shuffle","onIncorrectGuess","onCorrectGuess","Component","App","components_Header","components_Characters","correctGuess","incorrectGuess","newScore","newTopScore","newState","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1635d27.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n    return (\n        <header>\n            <nav className=\"navbar-dark bg-dark fixed-top\">\n                <div className=\"container-fluid my-3\">\n                    <div className=\"row align-items-center justify-content-between text-white\">\n                        <div className=\"col-sm-auto\">\n                            <a className=\"navbar-brand\" href=\"/\"><h1>Clicky Game</h1></a>\n                        </div>\n                        <div className=\"col-sm-auto\">\n                            <p className=\"mb-0\">{props.guessedStatus}</p>\n                        </div>\n                        <div className=\"col-sm-auto\">\n                            <p className=\"mb-0\"><strong>Score:</strong> {props.score}  <strong>| Top Score:</strong> {props.topScore} </p>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction CharacterImage(props) {\n    return (\n        <img alt={props.name} className=\"img-fluid\" src={props.image} onClick={props.onclick} />\n    );\n}\n\nexport default CharacterImage;","import axios from \"axios\";\nconst BASEURL = \"https://rickandmortyapi.com/api/\";\nconst CHARACTERS = \"character/[1,2,3,4,5,6,7,8,9,10,11,12]\"; \nexport default{\n    search: function(){\n        return axios.get(BASEURL + CHARACTERS);\n    }\n}","import React, { Component } from \"react\";\nimport CharacterImage from \"./CharacterImage\";\nimport API from \"../utils/API\";\n\nclass Characters extends Component {\n\n    constructor(props) {\n        super(props);\n        this.clickedChars = {};\n        this.state = {\n            result: []\n        };\n    }\n\n    //component has mounted\n    componentDidMount() {\n        this.searchCharacters();\n    }\n    searchCharacters = () => {\n        API.search()\n            .then(res => this.setState({ result: res.data }))\n            .catch(err => console.log(err));\n    };\n    render() {\n        const characters = this.state.result;\n        console.log(characters);\n        return (\n            <div className=\"mt-5\">\n                {characters\n                    .map((character) => {\n                        return (\n                            <CharacterImage\n                                key={character.id}\n                                name={character.name}\n                                image={character.image}\n                                onclick={() => this.handleClick(character.id)}\n                            />\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n    shuffle() {\n        let copy = this.state.result.slice();\n        copy.sort(function (a, b) { return 0.5 - Math.random() });\n        this.setState({ result: copy });\n    }\n    handleClick(charId) {\n        console.log(charId);\n        let clickedChar = charId;\n        this.shuffle();\n        if (!this.clickedChars[clickedChar]) {\n            this.clickedChars[clickedChar] = true;\n            this.props.onCorrectGuess();\n        } else{\n            this.clickedChars = {};\n            this.props.onIncorrectGuess();\n        }\n    }\n}\n\nexport default Characters;","import React, { Component } from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport Header from \"./components/Header\";\nimport Characters from './components/Characters';\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    guessedStatus: \"Click an image to begin! To earn points avoid clicking the same image more than once.\"\n  }\n  render() {\n    return (\n      <div>\n        <Header \n        score={this.state.score}\n        topScore={this.state.topScore}\n        guessedStatus={this.state.guessedStatus} />\n        <Characters\n          onCorrectGuess={() => this.correctGuess()}\n          onIncorrectGuess={() => this.incorrectGuess()} />\n      </div>\n    );\n  }\n\n  correctGuess() {\n    console.log(\"You guessed correctly!\");\n    let newScore = this.state.score + 1;\n    let newTopScore = this.state.topScore;\n    \n    if (newScore > this.state.topScore) {\n      newTopScore++;\n    }\n\nlet newState = {\n      score: newScore,\n      topScore: newTopScore,\n      guessedStatus: \"You guessed correctly!\"\n    };\nthis.setState(newState);\n  }\n  incorrectGuess() {\n    console.log(\"You guessed incorrectly!\");\n    let newState = {\n      score: 0,\n      guessedStatus: \"You guessed incorrectly!\"\n    }\n    this.setState(newState);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}